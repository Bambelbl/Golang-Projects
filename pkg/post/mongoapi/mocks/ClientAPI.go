// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"
	mongo "redditclone/pkg/post/mongoapi"

	mock "github.com/stretchr/testify/mock"

	options "go.mongodb.org/mongo-driver/mongo/options"

	readpref "go.mongodb.org/mongo-driver/mongo/readpref"
)

// ClientAPI is an autogenerated mock type for the ClientAPI type
type ClientAPI struct {
	mock.Mock
}

// Database provides a mock function with given fields: name, opts
func (_m *ClientAPI) Database(name string, opts ...*options.DatabaseOptions) mongo.DatabaseAPI {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mongo.DatabaseAPI
	if rf, ok := ret.Get(0).(func(string, ...*options.DatabaseOptions) mongo.DatabaseAPI); ok {
		r0 = rf(name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.DatabaseAPI)
		}
	}

	return r0
}

// Disconnect provides a mock function with given fields: ctx
func (_m *ClientAPI) Disconnect(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ping provides a mock function with given fields: ctx, rp
func (_m *ClientAPI) Ping(ctx context.Context, rp *readpref.ReadPref) error {
	ret := _m.Called(ctx, rp)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *readpref.ReadPref) error); ok {
		r0 = rf(ctx, rp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClientAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientAPI creates a new instance of ClientAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientAPI(t mockConstructorTestingTNewClientAPI) *ClientAPI {
	mock := &ClientAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
