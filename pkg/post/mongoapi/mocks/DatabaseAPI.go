// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mongo "redditclone/pkg/post/mongoapi"

	mock "github.com/stretchr/testify/mock"

	options "go.mongodb.org/mongo-driver/mongo/options"
)

// DatabaseAPI is an autogenerated mock type for the DatabaseAPI type
type DatabaseAPI struct {
	mock.Mock
}

// Collection provides a mock function with given fields: name, opts
func (_m *DatabaseAPI) Collection(name string, opts ...*options.CollectionOptions) mongo.CollectionAPI {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mongo.CollectionAPI
	if rf, ok := ret.Get(0).(func(string, ...*options.CollectionOptions) mongo.CollectionAPI); ok {
		r0 = rf(name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.CollectionAPI)
		}
	}

	return r0
}

type mockConstructorTestingTNewDatabaseAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabaseAPI creates a new instance of DatabaseAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabaseAPI(t mockConstructorTestingTNewDatabaseAPI) *DatabaseAPI {
	mock := &DatabaseAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
