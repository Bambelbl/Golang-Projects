// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"
	mongo "redditclone/pkg/post/mongoapi"

	mock "github.com/stretchr/testify/mock"

	options "go.mongodb.org/mongo-driver/mongo/options"
)

// CollectionAPI is an autogenerated mock type for the CollectionAPI type
type CollectionAPI struct {
	mock.Mock
}

// DeleteOne provides a mock function with given fields: ctx, filter, opts
func (_m *CollectionAPI) DeleteOne(ctx context.Context, filter interface{}, opts ...*options.DeleteOptions) (mongo.DeleteResultAPI, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mongo.DeleteResultAPI
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.DeleteOptions) mongo.DeleteResultAPI); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.DeleteResultAPI)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.DeleteOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, filter, opts
func (_m *CollectionAPI) Find(ctx context.Context, filter interface{}, opts ...*options.FindOptions) (mongo.CursorAPI, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mongo.CursorAPI
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOptions) mongo.CursorAPI); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.CursorAPI)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.FindOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: ctx, filter, opts
func (_m *CollectionAPI) FindOne(ctx context.Context, filter interface{}, opts ...*options.FindOneOptions) mongo.SingleResultAPI {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mongo.SingleResultAPI
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOneOptions) mongo.SingleResultAPI); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.SingleResultAPI)
		}
	}

	return r0
}

// InsertOne provides a mock function with given fields: ctx, document, opts
func (_m *CollectionAPI) InsertOne(ctx context.Context, document interface{}, opts ...*options.InsertOneOptions) (mongo.InsertOneResultAPI, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, document)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mongo.InsertOneResultAPI
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.InsertOneOptions) mongo.InsertOneResultAPI); ok {
		r0 = rf(ctx, document, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.InsertOneResultAPI)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.InsertOneOptions) error); ok {
		r1 = rf(ctx, document, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceOne provides a mock function with given fields: ctx, filter, replacement, opts
func (_m *CollectionAPI) ReplaceOne(ctx context.Context, filter interface{}, replacement interface{}, opts ...*options.ReplaceOptions) (mongo.UpdateResultAPI, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter, replacement)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mongo.UpdateResultAPI
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.ReplaceOptions) mongo.UpdateResultAPI); ok {
		r0 = rf(ctx, filter, replacement, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.UpdateResultAPI)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...*options.ReplaceOptions) error); ok {
		r1 = rf(ctx, filter, replacement, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCollectionAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewCollectionAPI creates a new instance of CollectionAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCollectionAPI(t mockConstructorTestingTNewCollectionAPI) *CollectionAPI {
	mock := &CollectionAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
