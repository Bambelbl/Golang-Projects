// Code generated by MockGen. DO NOT EDIT.
// Source: post.go

// Package post is a generated GoMock package.
package post

import (
	user "redditclone/pkg/user"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockPostsRepo is a mock of PostsRepo interface.
type MockPostsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPostsRepoMockRecorder
}

// MockPostsRepoMockRecorder is the mock recorder for MockPostsRepo.
type MockPostsRepoMockRecorder struct {
	mock *MockPostsRepo
}

// NewMockPostsRepo creates a new mock instance.
func NewMockPostsRepo(ctrl *gomock.Controller) *MockPostsRepo {
	mock := &MockPostsRepo{ctrl: ctrl}
	mock.recorder = &MockPostsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostsRepo) EXPECT() *MockPostsRepoMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockPostsRepo) AddComment(id, newComment string, timeCreated time.Time, author user.User, newCimmentID string, post **Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", id, newComment, timeCreated, author, newCimmentID, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddComment indicates an expected call of AddComment.
func (mr *MockPostsRepoMockRecorder) AddComment(id, newComment, timeCreated, author, newCimmentID, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockPostsRepo)(nil).AddComment), id, newComment, timeCreated, author, newCimmentID, post)
}

// AddPost mocks base method.
func (m *MockPostsRepo) AddPost(author user.User, reqPost Post, newPostID string, timeCreated time.Time) *Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPost", author, reqPost, newPostID, timeCreated)
	ret0, _ := ret[0].(*Post)
	return ret0
}

// AddPost indicates an expected call of AddPost.
func (mr *MockPostsRepoMockRecorder) AddPost(author, reqPost, newPostID, timeCreated interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockPostsRepo)(nil).AddPost), author, reqPost, newPostID, timeCreated)
}

// DeleteComment mocks base method.
func (m *MockPostsRepo) DeleteComment(postID, commentID string, post **Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", postID, commentID, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPostsRepoMockRecorder) DeleteComment(postID, commentID, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPostsRepo)(nil).DeleteComment), postID, commentID, post)
}

// DeletePost mocks base method.
func (m *MockPostsRepo) DeletePost(postID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostsRepoMockRecorder) DeletePost(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostsRepo)(nil).DeletePost), postID)
}

// DownvotePost mocks base method.
func (m *MockPostsRepo) DownvotePost(postID string, author user.User, post **Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownvotePost", postID, author, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownvotePost indicates an expected call of DownvotePost.
func (mr *MockPostsRepoMockRecorder) DownvotePost(postID, author, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownvotePost", reflect.TypeOf((*MockPostsRepo)(nil).DownvotePost), postID, author, post)
}

// GetAll mocks base method.
func (m *MockPostsRepo) GetAll() ([]*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPostsRepoMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPostsRepo)(nil).GetAll))
}

// GetCategory mocks base method.
func (m *MockPostsRepo) GetCategory(category string) ([]*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", category)
	ret0, _ := ret[0].([]*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockPostsRepoMockRecorder) GetCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockPostsRepo)(nil).GetCategory), category)
}

// GetPost mocks base method.
func (m *MockPostsRepo) GetPost(id string, post **Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", id, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostsRepoMockRecorder) GetPost(id, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostsRepo)(nil).GetPost), id, post)
}

// GetUserPosts mocks base method.
func (m *MockPostsRepo) GetUserPosts(username string) ([]*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPosts", username)
	ret0, _ := ret[0].([]*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPosts indicates an expected call of GetUserPosts.
func (mr *MockPostsRepoMockRecorder) GetUserPosts(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPosts", reflect.TypeOf((*MockPostsRepo)(nil).GetUserPosts), username)
}

// UnvotePost mocks base method.
func (m *MockPostsRepo) UnvotePost(postID string, author user.User, post **Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnvotePost", postID, author, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnvotePost indicates an expected call of UnvotePost.
func (mr *MockPostsRepoMockRecorder) UnvotePost(postID, author, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnvotePost", reflect.TypeOf((*MockPostsRepo)(nil).UnvotePost), postID, author, post)
}

// UpvotePost mocks base method.
func (m *MockPostsRepo) UpvotePost(postID string, author user.User, post **Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpvotePost", postID, author, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpvotePost indicates an expected call of UpvotePost.
func (mr *MockPostsRepoMockRecorder) UpvotePost(postID, author, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpvotePost", reflect.TypeOf((*MockPostsRepo)(nil).UpvotePost), postID, author, post)
}
